---
import FullLayout from '@/layouts/FullLayout.astro'
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import type { MarkdownLayoutProps } from 'astro'
import type { Frontmatter, SiteMeta } from '@/types'
import { cx } from '@/lib/utils'
import '@/styles/syntaxHighlight.css'
import NoteList from '@/components/NoteList.astro'

interface Props extends MarkdownLayoutProps<Frontmatter> {}

const {
  title,
  description,
  publishedAt,
  updatedAt,
  tags,
  //comments = true,
  slug,
  minutesRead,
  hero,
} = Astro.props.frontmatter

const metadata: SiteMeta = {
  title: `${title}`,
  description,
  publishedAt,
}

const posts = await Astro.glob<Frontmatter>('./*.mdx')
const nonDraftPosts = posts.filter(({ frontmatter }) => !frontmatter.draft)
const sortedPosts = nonDraftPosts.sort(
  ({ frontmatter: { publishedAt: a } }, { frontmatter: { publishedAt: b } }) =>
    new Date(b).valueOf() - new Date(a).valueOf()
)

const currentPostIndex = sortedPosts.findIndex(({ frontmatter }) => frontmatter.slug === slug)
const prevPost = sortedPosts[currentPostIndex + 1]
const nextPost = sortedPosts[currentPostIndex - 1]

dayjs.extend(relativeTime)

export type BaseHeadProps = {
  meta: SiteMeta
}
---

<FullLayout title={`${title} â€“ Manuel Fessen`} description={description}>
  <div class='hidden sm:flex sm:w-96'>
    <NoteList />
  </div>
  <div class='relative flex max-h-screen w-full flex-col overflow-y-auto bg-white dark:bg-black'>
    <div
      class='filter-blur sticky top-0 z-10 flex flex-col justify-center px-3 py-2 dark:border-b dark:border-gray-900 h-12 bg-white dark:bg-black'
    >
      <div class='flex items-center justify-between flex-none'>
        <span class='flex items-center space-x-3'
          ><a
            class='flex items-center justify-center p-2 rounded-md text-primary hover:bg-gray-200 dark:hover:bg-gray-800 lg:hidden'
            onclick='history.back()'
            ><svg
              xmlns='http://www.w3.org/2000/svg'
              width='16'
              height='16'
              viewBox='0 0 24 24'
              fill='none'
              stroke='currentColor'
              stroke-width='2'
              stroke-linecap='round'
              stroke-linejoin='round'
              class='text-primary'
              ><line x1='19' y1='12' x2='5' y2='12'></line><polyline points='12 19 5 12 12 5'
              ></polyline></svg
            ></a
          ><h2
            class='text-sm font-bold text-black dark:text-white transform-gpu line-clamp-1'
            style='transform: translateY(200%); opacity: 0;'
          >
            {title}
          </h2></span
        ><div class='flex items-center space-x-2'></div>
      </div><div></div>
    </div>
    <div class='mx-auto w-full max-w-3xl px-4 py-12 pb-10 md:px-8'>
      <div class='space-y-3 mb-8'>
        {hero && <img class='mx-auto w-full rounded' loading='lazy' src={hero} alt={title} />}
        <h1 class='font-sans text-2xl font-bold xl:text-3xl'>{title}</h1>
        <div class='flex items-center justify-between md:flex-row md:items-center'>
          <div class='flex items-center mt-4'>
            <p class='text-sm text-gray-700 dark:text-gray-300'>
              <span>Published at</span>
              <time
                class='text-gray-600 dark:text-gray-200 font-semibold'
                datetime={dayjs(publishedAt).toISOString()}
                title={dayjs(publishedAt).fromNow()}
              >
                {dayjs(publishedAt).format('DD MMMM YYYY')}
              </time>
              {
                updatedAt && (
                  <>
                    <span>,&nbsp;</span>
                    <br class='sm:hidden' />
                    <span>modified on</span>
                    <time
                      class='font-semibold text-gray-600 dark:text-gray-200'
                      datetime={dayjs(updatedAt).toISOString()}
                      title={dayjs(updatedAt).fromNow()}
                    >
                      {dayjs(updatedAt).format('DD MMMM YYYY')}
                    </time>
                  </>
                )
              }
            </p>
          </div>
          <p class='text-sm text-gray-600 dark:text-gray-300 min-w-32 md:mt-0 mt-4'>
            {minutesRead}
          </p>
        </div>
      </div>

      <article
        class={cx(
          'prose dark:prose-invert max-w-none',
          'prose-hr:duration-300',
          'prose-pre:border-2 prose-pre:border-gray-200 dark:prose-pre:border-gray-700',
          'prose-code:text-pink-500'
        )}
      >
        <slot />
      </article>
      <div class='flex flex-col lg:flex-row gap-2 w-full mt-10'>
        {
          prevPost && (
            <a
              href={`/notes/${prevPost.frontmatter.slug}`}
              class={cx(
                'border-grey-200 flex grow flex-col rounded-lg border p-3 hover:bg-gray-200 dark:border-gray-800 dark:hover:bg-gray-800 sm:p-4',
                nextPost ? 'lg:w-1/2' : 'lg:w-full'
              )}
            >
              <p class='text-gray-600 dark:text-gray-300'>Previous note</p>
              <p class='text-black dark:text-white'>{prevPost.frontmatter.title}</p>
            </a>
          )
        }
        {
          nextPost && (
            <a
              href={`/notes/${nextPost.frontmatter.slug}`}
              class={cx(
                'border-grey-200 flex grow flex-col rounded-lg border p-3 hover:bg-gray-200 dark:border-gray-800 dark:hover:bg-gray-800 sm:p-4',
                prevPost ? 'lg:w-1/2 lg:items-end' : 'lg:w-full'
              )}
            >
              <p class='text-gray-600 dark:text-gray-300'>Next note</p>
              <p class='text-black dark:text-white'>{nextPost.frontmatter.title}</p>
            </a>
          )
        }
      </div>
    </div>
  </div>
</FullLayout>
