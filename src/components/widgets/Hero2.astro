---
import Image from '~/components/common/Image.astro';
import type { CallToAction } from '~/types';
import Button from '~/components/ui/Button.astro';

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  actions?: string | CallToAction[];
  image?: string | any;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
} = Astro.props;
---

<section 
  class="relative md:-mt-[76px] not-prose animation"
  aria-label="Hero Section"
  role="banner"
>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-8 sm:py-14 md:py-20 lg:flex lg:gap-8">
      <div class="lg:text-left pb-10 md:pb-16">
        {
          tagline && (
            <p
              class="sm:text-4xl text-muted font-semibold tracking-wide hidden sm:flex"
              set:html={tagline}
              role="doc-subtitle"
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl sm:text-6xl md:text-8xl xl:text-9xl leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
              set:html={title}
              aria-label={typeof title === 'string' ? title : 'Page Title'}
            />
          )
        }
        <div class="max-w-7xl mx-auto lg:max-w-none">
          {subtitle && (
            <p 
              class="text-xl text-muted mb-6 dark:text-slate-300" 
              set:html={subtitle}
              role="doc-subtitle"
            />
          )}

          {
            actions && (
              <div class="max-w-xs sm:max-w-md flex flex-nowrap flex-col sm:flex-row sm:justify-start gap-4 m-auto lg:m-0">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <Button 
                      {...(action || {})} 
                      class="w-full sm:w-auto"
                      aria-label={action.text}
                    />
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      {image && (
        <div class="lg:flex lg:w-1/2">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              {...(image || {})}
              class="mx-auto lg:mr-0 w-full rounded-md"
              width={400}
              height={400}
              loading="eager"
              priority={true}
              decoding="async"
              alt={image.alt || 'Hero Image'}
            />
          )}
        </div>
      )}
    </div>
  </div>
</section>