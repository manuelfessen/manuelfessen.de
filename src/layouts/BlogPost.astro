---
import BaseLayout from "./BaseLayout.astro";
import { getLocaleTime, getPreviousAndNextPosts, sortMDByDate } from "src/util";
import Paginator from "@/components/Atoms/Paginator";
import type { Post } from "@/types";

const {
	content: { title, description, publishDate, tags },
	headings,
	frontmatter,
} = Astro.props;
const date = new Date(publishDate);
const datetime = date.toISOString();
const { minutesRead } = Astro.props.frontmatter;
const postDate = getLocaleTime(date);
const currentPage = new URL(Astro.request.url).pathname;
const allPosts = await Astro.glob<Post>("../pages/posts/*.mdx");
const allSortedPosts = sortMDByDate(allPosts);
const { prev, next } = getPreviousAndNextPosts(currentPage, allSortedPosts);
const paginationProps = {
	...(prev && {
		prevUrl: {
			url: prev.url,
			text: `‚Üê ${prev.frontmatter.title}`,
			srLabel: " Previous Article:",
		},
	}),
	...(next && {
		nextUrl: {
			url: next.url,
			text: `${next.frontmatter.title} ‚Üí`,
			srLabel: "Next Article:",
		},
	}),
};
---

<BaseLayout meta={{ title, description }}>
	<main class="flex flex-1 w-full mx-auto gap-4 items-start max-w-5xl h-full">
		<article class="flex flex-col flex-1 mx-auto gap-4">
			<h1 class="text-4xl font-bold">{frontmatter.title}</h1>
			<div class="flex">
				<time class="pr-4">
					<h5 class="">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="16"
							height="16"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							viewBox="0 0 24 24"
							aria-hidden="true"
							class="inline mr-2"
							style="position: relative; top: -1.5px;"
							><circle cx="12" cy="12" r="10"></circle><path
								d="M12 6L12 12 16 14"></path>
						</svg>{postDate}
					</h5>
				</time>
				<div class="pr-4">
					üìñ {minutesRead}
				</div>
				{
					tags?.length && (
						<div class="hidden items-center md:flex">
							{" "}
							<svg
								xmlns="http://www.w3.org/2000/svg"
								width="16"
								height="16"
								fill="none"
								stroke="currentColor"
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								viewBox="0 0 24 24"
								aria-hidden="true"
								class="mr-2 inline"
							>
								<path d="M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82zM7 7h.01" />
							</svg>
							<ul class="flex list-none items-center gap-x-2">
								{tags.map((tag) => (
									<li>
										<a
											class="inline-block"
											aria-label={`View more blogs with the tag ${tag}`}
											href={`/tags/${tag}`}
										>
											&#35;{tag}
										</a>
									</li>
								))}
							</ul>
						</div>
					)
				}
			</div>
			<span>
				<div class="font-medium inline">Summary:</div>
				<span class="">{description}</span>
			</span>
			<div class="flex gap-4">
				<div
					class="flex-1 prose prose-sm max-w-none prose-orange prose-headings:scroll-mt-24"
				>
					<!-- Content -->
					<slot />
				</div>
			</div>
		</article>
		<aside
			class="w-60 hidden md:flex flex-col gap-3 sticky top-24 bg-base-300 p-4 rounded-md items-start"
		>
			<h2 class="font-semibold">Table of Contents</h2>
			<ul class="mt-4 text-xs space-y-2 accent">
				{
					headings.map(({ slug, text }) => (
						<li class="hover:text-accent dark:hover:text-accent">
							<a href={`#${slug}`} aria-label={`Scroll to section: ${text}`}>
								<span>&#35;</span> {text}
							</a>
						</li>
					))
				}
			</ul>
		</aside>
	</main>
</BaseLayout>

<style>
	/* Hide the weird code block adding the language */
	:global(article pre .language-id) {
		@apply hidden;
	}
</style>
